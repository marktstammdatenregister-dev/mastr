package main

import (
	"bytes"
	"flag"
	"fmt"
	"log"
	"marktstammdatenregister.dev/internal/spec"
	"marktstammdatenregister.dev/model/generator"
	"path"
	"strings"
	"text/template"
)

var (
	outputPrefix = flag.String("prefix", "", "prefix to be added to the output file")
	outputSuffix = flag.String("suffix", "", "suffix to be added to the output file")
)

type modelData struct {
	Command           string
	TargetPackageName string
	ModelElementName  string
	ModelRootName     string
	ModelDescription  string
	ModelFields       string
}

var modelTemplate = template.Must(template.New("").Parse(`// Code generated by go mastr/model {{.Command}}; DO NOT EDIT.

package {{.TargetPackageName}}

import (
	"encoding/xml"
)

// {{.ModelRootName}} {{.ModelDescription}}
type {{.ModelRootName}} struct {
	XMLName          xml.Name         ` + "`" + `xml:"{{.ModelRootName}}"` + "`" + `
	{{.ModelRootName}} []{{.ModelElementName}} ` + "`" + `xml:"{{.ModelElementName}}"` + "`" + ` 
}

type {{.ModelElementName}} struct {
	{{.ModelFields}}
}
`))

func generateModelForTable(table spec.Table) {
	modelFields := strings.Builder{}

	modelFields.WriteString(fmt.Sprintf("XMLName xml.Name `xml:\"%s\"`\n", table.Element))

	for _, field := range table.Fields {
		fName := field.Name
		fType := generator.MapGoType(field)
		//fComment := field.
		fComment := ""
		if len(field.Description) > 0 {
			fComment = "// " + field.Description
		}
		if field.References != nil {
			if len(field.Description) > 0 {
				fComment = fmt.Sprintf("// %s; referenziert %s", field.Description, field.References.Table)
			} else {
				fComment = fmt.Sprintf("// referenziert %s", field.References.Table)
			}
		}
		modelFields.WriteString(fmt.Sprintf("%s %s `xml:\"%s\"` %s\n", fName, fType, fName, fComment))
	}

	data := modelData{
		Command:           "generator",
		TargetPackageName: "main",
		ModelRootName:     table.Root,
		ModelElementName:  table.Element,
		ModelDescription:  table.Description,
		ModelFields:       modelFields.String(),
	}

	var buf bytes.Buffer
	if err := modelTemplate.Execute(&buf, data); err != nil {
		log.Fatalf("generating code: %v", err)
	}

	generator.FormatAndWriteOutput(buf, *outputPrefix, *outputSuffix, path.Join("model", table.Element))
}

func main() {
	flag.Parse()

	export, err := spec.DecodeExport("spec/Gesamtdatenexport.yaml")
	if err != nil {
		panic(err)
	}
	for _, descriptor := range export {
		generateModelForTable(descriptor.Table)
	}
}
