name: Daily
on:
  # Every day at 04:00 UTC (exports seem to finish before 02:00)
  schedule: [{cron: '0 4 * * *'}]
  # Enable manual trigger
  workflow_dispatch:
env:
  SRHT_SITE_OAUTH2_TOKEN: ${{secrets.SRHT_SITE_OAUTH2_TOKEN}}
  RCLONE_CONFIG_WASABI_ACCESS_KEY_ID: ${{secrets.RCLONE_CONFIG_WASABI_ACCESS_KEY_ID}}
  RCLONE_CONFIG_WASABI_SECRET_ACCESS_KEY: ${{secrets.RCLONE_CONFIG_WASABI_SECRET_ACCESS_KEY}}
  FLY_API_TOKEN: ${{secrets.FLY_API_TOKEN}}

jobs:
  daily:
    runs-on: ubuntu-latest
    steps:

    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x

    - name: Check out code
      uses: actions/checkout@v2

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build mastr
      run: go build -o mastr ./cmd/main.go

    - name: Install packages
      run: |
        set -Eeuxo pipefail

        sudo apt-get -qq update
        sudo apt-get -qq install axel brotli rclone

        # ruby-mustache does not handle zero as an empty value for the purpose of {#IntValue}...{/IntValue} blocks.
        # https://github.com/cbroglie/mustache/releases
        curl -sSLo mustache.tar.gz https://github.com/cbroglie/mustache/releases/download/v1.3.1/mustache_1.3.1_linux_amd64.tar.gz
        tar -xvzf mustache.tar.gz mustache
        sudo mv mustache /usr/bin/mustache
        rm mustache.tar.gz

        # https://github.com/superfly/flyctl/releases
        curl -sSLo flyctl.tar.gz https://github.com/superfly/flyctl/releases/download/v0.0.298/flyctl_0.0.298_Linux_x86_64.tar.gz
        tar -xvzf flyctl.tar.gz
        sudo mv flyctl /usr/bin/flyctl
        rm flyctl.tar.gz

        # https://github.com/mikefarah/yq/releases
        sudo curl -sSLo /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.20.2/yq_linux_amd64

        rclone --version
        flyctl version
        yq --version

    - name: Download export
      run: |
        set -Eeuxo pipefail

        export EXPORT_URL="$(curl -sSL https://www.marktstammdatenregister.de/MaStR/Datendownload |
          sed -E 's|^.*(https://download.marktstammdatenregister.de/Gesamtdatenexport_.*\.zip).*$|\1|gp;d')"
        EXPORT_FILENAME="${EXPORT_URL##*/}"
        export SHORT_FILENAME="$(echo "${EXPORT_FILENAME}" | sed -E 's|^(Gesamtdatenexport_.+)_.*_.*.*\.zip$|\1|gp;d')"
        export DATE="$(echo "${EXPORT_FILENAME}" | sed -E 's|^Gesamtdatenexport_(\d{8})_.*_.*.*\.zip$|\1|gp;d')"

        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
        echo "EXPORT_FILENAME=${EXPORT_FILENAME}" >> "${GITHUB_ENV}"
        echo "SHORT_FILENAME=${SHORT_FILENAME}" >> "${GITHUB_ENV}"
        echo "DATE=${DATE}" >> "${GITHUB_ENV}"

        # Show source of data on every Datasette page.
        yq eval --inplace '.source = strenv(SHORT_FILENAME) | .source_url = strenv(EXPORT_URL)' build/metadata.yaml

        axel --quiet --output="${EXPORT_FILENAME}" "${EXPORT_URL}"
        ls -lh "${EXPORT_FILENAME}"

        # List compressed files, ordered by timestamp.
        unzip -l "${EXPORT_FILENAME}" | tail -n +4 | head -n -2 | sort --key 3

    - name: Process export
      run: |
        set -Eeuxo pipefail

        ./mastr \
          -export "${{env.EXPORT_FILENAME}}" \
          -spec spec/Gesamtdatenexport.yaml \
          -database build/Marktstammdatenregister.db \
          -report-json stdout \
          >"${{env.SHORT_FILENAME}}.json"
        ls -lh build/Marktstammdatenregister.db

        rclone copy --include "${{env.SHORT_FILENAME}}.json" . 'wasabi:mastr-validation-1' --config build/rclone.conf

    - name: Check out stat
      uses: actions/checkout@v3
      with:
        repository: marktstammdatenregister-dev/stat
        path: stat

    - name: Update stat
      run: |
        set -Eeuxo pipefail

        pushd stat
        ./stat ../build/Marktstammdatenregister.db "${{env.DATE}}" | tee --append stat.json

        git config user.name github-actions
        git config user.email github-actions@github.com
        git add stat.json
        git commit -m 'Update stat.json'
        git push
        popd

    - name: Deploy
      run: |
        set -Eeuxo pipefail

        brotli --rm -4 --output=build/Marktstammdatenregister.db.br build/Marktstammdatenregister.db
        ls -lh build/Marktstammdatenregister.db.br

        flyctl deploy . --config build/fly.toml --dockerfile build/Dockerfile
